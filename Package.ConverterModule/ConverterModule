from flask import Flask, send_file, render_template_string, Response
from flask_cors import CORS
import os
from glob import glob
from moviepy.editor import VideoFileClip
import tempfile
from functools import reduce
import pysrt
from pymkv import MKVFile

ROOT_VIDEO_DIR = "C:\\Users\\Nikla\\Downloads"
TEMP_DIRECTORY = tempfile.gettempdir()

def convert_mkv_to_mp4(input_path):
    """
    Convert an MKV file to MP4 format using moviepy.
    Returns the path to the converted file.
    """
    filename = os.path.basename(input_path)
    name, _ = os.path.splitext(filename)
    output_path = os.path.join(TEMP_DIRECTORY, f"{name}.mp4")
    
    if os.path.exists(output_path):
        return output_path
    
    try:
        video = VideoFileClip(input_path)
        video.write_videofile(output_path, codec="libx264", audio_codec="aac")
        return output_path
    except Exception as e:
        print(f"Error converting {input_path}: {str(e)}")
        return None
    
def convert_mkv_to_mp4_with_subtitles(input_path):
    filename = os.path.basename(input_path)
    filepath = os.path.dirname(input_path)
    name, _ = os.path.splitext(filename)
    output_path = os.path.join(filepath, f"{name}.mp4")
    subtitle_path = os.path.join(filepath, f"{name}.srt")

    if os.path.exists(output_path) and os.path.exists(subtitle_path):
        return output_path, subtitle_path

    try:
        # Convert video
        print("## CONVERTING ##")
        video = VideoFileClip(input_path)
        video.write_videofile(output_path, codec="libx264", audio_codec="aac")
        print("## DONE CONVERTING ##")

        # Extract subtitles
        mkv = MKVFile(input_path)
        subtitle_tracks = [track for track in mkv.tracks if track.track_type == 'subtitles']
        print("#####")
        print(subtitle_tracks)
        
        if subtitle_tracks:
            subtitle_track = subtitle_tracks[0]  # Get the first subtitle track
            subs = pysrt.from_string(subtitle_track.get_track())
            subs.save(subtitle_path, encoding='utf-8')
            print(f"Subtitle track found!")
        else:
            print(f"No subtitle track found in {input_path}")
            subtitle_path = None

        try:
            move_to_downloads = os.path.join(input_path[:-4],'.mp4')
            os.rename(output_path,move_to_downloads)
            print(output_path + " moved to " + move_to_downloads)
            output_path = move_to_downloads
            print("Film Transferred!")
        except e:
            print("Couldn't move Movie file!")

        try:
            move_to_downloads = os.path.join(input_path[:-4],'.srt')
            os.rename(output_path,move_to_downloads_subs)
            subtitle_path = move_to_downloads_subs
            print("Subs Transferred!")
        except e:
            print("Couldn't move Subs file!")
        

        return output_path, subtitle_path
    except Exception as e:
        print(f"Error processing {input_path}: {str(e)}")
        return None, None

def build_up_video_list() -> [str] :
    movies = []
    for root, subFolder, files in os.walk(ROOT_VIDEO_DIR):
        for item in files:
            print(movies)
            if item.endswith(".mp4") :
                fileNamePath = str(os.path.join(root,subFolder,item))
                movies.append(fileNamePath)
            elif item.endswith(".mkv"):
                fileNamePath = str(os.path.join(root,subFolder,item))
                movies.append(convert_mkv_to_mp4(fileNamePath))
    return movies

mkv_files = glob("C:\\Users\\Nikla\\Downloads\\"+'/**/*.mkv', recursive=True) 
mp4_files = glob("C:\\Users\\Nikla\\Downloads\\"+'/**/*.mp4', recursive=True)

print("TEST no.1 : Rick & Morty!")
reduceRM = lambda x : x if "FINDME" in x else None
mkv_files_mapped = list(map(reduceRM,mkv_files))
filterFunc = lambda x : True if x is not None else False
rick_and_morty_list =  list(filter(filterFunc,mkv_files_mapped))

for movie in rick_and_morty_list:
    if movie[:-4]+".mp4" in mp4_files:
        pass
    else:
        print(f"Converting {movie}")
        newMov = convert_mkv_to_mp4_with_subtitles(movie)
        print(newMov)
        os.remove(movie)
        mp4_files.append(newMov)